
24.1.2

Choose R. Wire the circuit as shown in Figure 24.2, except for the connection
from the LED to OC1. The LED and phototransistor should be pointing toward each
other, with approximately one inch separation, as shown in Figure 24.4. Now choose R to
be as small as possible while ensuring that the voltage Vout at the phototransistor emitter is
close to 3 V when the LED anode is connected to 3.3 V (maximum LED brightness) and
close to 0 V when the LED anode is disconnected (the LED is off). (Something in the
10 k! range may work, but use a smaller resistance if you can still get the same voltage
swing.) Record your value of R. Now connect the anode of the LED to OC1 for the rest of
the project.

// A 10K resistor was used

24.2.1

PWM calculation. You will use Timer3 as the timer base for OC1. You want a 20 kHz
PWM on OC1. Timer3 takes the PBCLK as input and uses a prescaler of 1. What should
PR3 be?

PBCLK input is 80 MHz (12.5 ns between rising edges). 
Prescaler of 1. 
T = (PR3 + 1) * N * 12.5 ns. where N = 1 and T = 5*10^-5 seconds
So, PR3 = 3999

24.2.2

PWM program. Write a program that uses your previous result to create a 20 kHz PWM
output on OC1 (with no fault pin) using Timer3. Set the duty cycle to 75%. Get the
following screenshots from your oscilloscope:


a. The OC1 waveform. Verify that this waveform matches your expectations.

// OC1 should be a pulse save with 75% duty cycle. This is confirmed by Channel 2.

b. The sensor voltage Vout.

// Phototransistor output remains at approximately 3 volts, as shown by Channel 1. 

c. Now remove the 1 µF capacitor and get another screenshot of Vout. Explain the
difference from the previous waveform.
Insert the 1 µF capacitor back into the circuit for the rest of the project.

// The capacitor's abscence eliminates our filter, so the delay of the phototransistor's voltage
// output is seen. It's ouput is no longer constantly 3 volts. 



24.3.1

Get a screenshot of your oscilloscope trace of Vout showing 2-4 periods of what should be
an approximately square-wave sensor reading.

// Done

24.3.2

Turn in your code.

// Done